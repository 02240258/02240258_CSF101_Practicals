import math

# 1. Linear Search - Return all indices and comparison count
def linear_search_all(arr, target):
    indices = []
    comparisons = 0
    for i, val in enumerate(arr):
        comparisons += 1
        if val == target:
            indices.append(i)
    return indices, comparisons

# 2. Binary Search - Find insertion point and count comparisons
def binary_search_insertion_point(arr, target):
    left, right = 0, len(arr)
    comparisons = 0
    while left < right:
        mid = (left + right) // 2
        comparisons += 1
        if arr[mid] < target:
            left = mid + 1
        else:
            right = mid
    return left, comparisons

# 3. Jump Search - Find target and count comparisons
def jump_search(arr, target):
    n = len(arr)
    step = int(math.sqrt(n))
    prev = 0
    comparisons = 0

    # Find the block
    while prev < n and arr[min(step, n) - 1] < target:
        comparisons += 1
        prev = step
        step += int(math.sqrt(n))
        if prev >= n:
            return -1, comparisons

    # Linear search within the block
    for i in range(prev, min(step, n)):
        comparisons += 1
        if arr[i] == target:
            return i, comparisons

    return -1, comparisons

# 4. Compare Performance of All Search Algorithms
def compare_search_algorithms(arr, target):
    print("Sorted Array:", arr)
    print("Target:", target)

    linear_result, linear_comps = linear_search_all(arr, target)
    print("\nLinear Search:")
    print("  Indices found:", linear_result)
    print("  Comparisons:", linear_comps)

    insert_point, binary_comps = binary_search_insertion_point(arr, target)
    print("\nBinary Search (Insertion Point):")
    print("  Insert at index:", insert_point)
    print("  Comparisons:", binary_comps)

    jump_index, jump_comps = jump_search(arr, target)
    print("\nJump Search:")
    print("  Found at index:", jump_index)
    print("  Comparisons:", jump_comps)

# --- Example Run ---
if __name__ == "__main__":
    # Use a sorted array for binary and jump search
    arr = sorted([3, 4, 2, 3, 5, 1, 6, 3, 8])
    target = 3
    compare_search_algorithms(arr, target)
